buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath "com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT"
    }
}

apply plugin: 'forge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft.version}-${config.tgregworks.version}"
group = "vexatos.tgregworks" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TGregworks"

repositories {
    /*maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }*/
    maven {
        name 'Curseforge Maven'
        url 'http://minecraft.curseforge.com/api/maven/'
    }
    maven {
        name "DVS1 Maven FS'"
        url 'http://dvs1.progwml6.com/files/maven'
    }
}

configurations {
    embedded
    implementation.extendsFrom embedded
    all*.exclude group: "codechicken"
}

dependencies {
    //compile "mantle:Mantle:1.7.10-0.3.1.jenkins176:deobf"
    //compile "codechicken:CodeChickenCore:1.7.10-1.0.2.9:dev"
    //compile "codechicken:NotEnoughItems:1.7.10-1.0.2.15:dev"
    compile "tconstruct:TConstruct:1.7.10-1.8.4.build951:deobf"
    compile "boni:IguanaTinkerTweaks:1.7.10-2.1.6.164:deobf"
    compile "tic-tooltips:TiCTooltips:mc1.7.10:1.2.5"
    compile "cofh:CoFHCore:1.7.10R3.0.4:dev"
    compile "cofh:CoFHLib:1.7.10R3.0.3:dev"
    provided "com.gregoriust.gregtech:gregtech_1.7.10:5.07.07:dev"
}

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}"
    runDir = "eclipse"

    replaceIn "vexatos/tgregworks/TGregworks.java"
    replace "@VERSION@", "${config.tgregworks.version}"
}

sourceSets {
    main {
        output.resourcesDir = 'build/classes/java/main'
    }
}

apply plugin: 'idea'
idea {
    module {
        outputDir = file('build/classes/java/main')
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


//For Building

def libDir = './build/libs'

task deobfJar(type: Jar) {
    description = 'Creates a jar file containing the non-obfuscated class files'
    classifier = 'deobf'
    destinationDir = file(libDir)
    from sourceSets.main.output.classesDirs
}

task apiZip(type: Zip) {
    description = 'Creates a zip file containing the API source files only'
    classifier = 'api'
    destinationDir = file(libDir)
    from sourceSets.main.allSource
    include 'vexatos/**/api/**'
}

task makeJars {
    description = 'Creates the mod files'
}

makeJars.dependsOn clean, build, deobfJar, apiZip
build.shouldRunAfter clean
deobfJar.shouldRunAfter build
apiZip.shouldRunAfter deobfJar

